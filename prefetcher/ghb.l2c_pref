#include "cache.h"
#include <iostream>
#include <stdio.h>
#include <vector>

#define PREFETCH_DEGREE 10
#define PREFETCH_DEGREE2 5
#define LOOK_HEAD 1
#define GHB_SIZE 256
#define IT_SIZE 256

struct GHB
{
    unsigned long long pc;      
    unsigned long long cl_addr; 
    unsigned int prev;         
};

GHB my_ghb[GHB_SIZE] = {0};

typedef struct
{
    unsigned int prev;
} IT_ENTRY;

IT_ENTRY it[IT_SIZE] = {0};


unsigned int curr_idx = 0;


typedef enum
{
    STRIDE1,
    STRIDE2,
    COND,
    FINDS1,
    FINDS2,
    OVER
} STATE;

void CACHE::l2c_prefetcher_initialize()
{
    printf("GHB ip stride_ip delta_next line prefetching\n");
}

uint32_t CACHE::l2c_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint32_t metadata_in)
{
    
    uint64_t cl_addr = addr >> LOG2_BLOCK_SIZE;
    if (my_ghb[it[ip % IT_SIZE].prev].pc == ip)
        my_ghb[curr_idx].prev = it[ip % IT_SIZE].prev;
    else
        my_ghb[curr_idx].prev = curr_idx;
    my_ghb[curr_idx].cl_addr = cl_addr;
    my_ghb[curr_idx].pc = ip;
    it[ip % IT_SIZE].prev = curr_idx;

    for (int i = 0; i < GHB_SIZE; i++)
        if (my_ghb[i].prev == curr_idx)
            my_ghb[i].prev = i;

    uint64_t prefetch_addr;
    long long int stride1 = 0, stride2 = 0;
    long long int delta = 0;
    unsigned int elem_idx = curr_idx;
    stride1 = my_ghb[curr_idx].cl_addr;
    std::vector<long long int> dels;
    int need_next = 1;

	for (int i = 0; i < 5 && my_ghb[elem_idx].prev != elem_idx && my_ghb[elem_idx].pc == ip; ++ i)
    {
        unsigned int prev_idx = my_ghb[elem_idx].prev;
        switch (i)
        {
        case 0:
            stride2 = my_ghb[prev_idx].cl_addr;
            stride1 = stride1 - stride2;
            dels.insert(dels.begin(), stride1);
            elem_idx = prev_idx;
            break;
        case 1:
            delta = my_ghb[prev_idx].cl_addr;
            stride2 = stride2 - delta;
            dels.insert(dels.begin(), stride2);
            elem_idx = prev_idx;
            break;
        case 2:
            if (stride1 == stride2)
            {
                need_next = 0;
                for (int i = LOOK_HEAD; i <= LOOK_HEAD + PREFETCH_DEGREE; i++)
                {
                    prefetch_addr = (cl_addr + i * stride1) << LOG2_BLOCK_SIZE;
                    prefetch_line(ip, addr, prefetch_addr, FILL_L2, 0);
                }
                i = 6;
            }
            break;
        case 3:
            delta = delta - my_ghb[prev_idx].cl_addr;
            dels.insert(dels.begin(), delta);
            if (delta != stride1) i --;
            delta = my_ghb[prev_idx].cl_addr;
            elem_idx = prev_idx;
            break;
        case 4:
            delta = delta - my_ghb[prev_idx].cl_addr;
            dels.insert(dels.begin(), delta);
            if (delta == stride2)
            {
                need_next = 0;
                for (int i = 2; i - 2 < PREFETCH_DEGREE2 && i < dels.size(); i++)
                {
                    prefetch_addr = (cl_addr + dels[i]) << LOG2_BLOCK_SIZE;
                    prefetch_line(ip, addr, prefetch_addr, FILL_L2, 0);
                }
                i = 6;
            }
            else
            {
                i = 2;
            }
            delta = my_ghb[prev_idx].cl_addr;
            elem_idx = prev_idx;
            break;
        }
    }

    if (need_next)
    {
        prefetch_addr = (cl_addr + 1) << LOG2_BLOCK_SIZE;
        prefetch_line(ip, addr, prefetch_addr, FILL_L2, 0);
    }

    curr_idx = (curr_idx + 1) % GHB_SIZE;
    return metadata_in;
}

uint32_t CACHE::l2c_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
    return metadata_in;
}

void CACHE::l2c_prefetcher_final_stats()
{
    printf("GHB ip_stride ip_delta next_line over\n");
}
